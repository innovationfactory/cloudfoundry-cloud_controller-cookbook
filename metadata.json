{
  "name": "cloudfoundry-cloud_controller",
  "description": "Installs/Configures cloudfoundry-cloud_controller",
  "long_description": "Description\n===========\n\nInstalls and configures CloudFoundry CloudController\n\nRequirements\n============\n\nPlatform\n--------\n\n* Ubuntu\n\nTested on:\n\n* Ubuntu 10.04\n\nCookbooks\n---------\n\nRequires Opscode's postgresql, mysql, database, and bluepill cookbooks.\nAlso requires trotter's cloudfoundry-common cookbook.\n\nAttributes\n==========\n\n* `cloudfoundry_cloud_controller['server']['domain']` - The domain name for your CloudFoundry instance. Default is `vcap.me'`.\n* `cloudfoundry_cloud_controller['server']['welcome']` - The welcome message that users will see when first connecting. Default is `VMWare's Cloud Application Platform\"`.\n* `cloudfoundry_cloud_controller['server']['support_address']` - Where users should go to get support. Default is `http://support.cloudfoundry.com'`.\n* `cloudfoundry_cloud_controller['server']['allow_registration']` - Set whether users can self register to your CloudFoundry Instance. Default is `true`.\n* `cloudfoundry_cloud_controller['server']['allow_external_app_uris']` - TODO (trotter): Find out what this does. Default is `false`.\n* `cloudfoundry_cloud_controller['server']['external_port']` - The external port on which the CloudController is accessible. This value normally won't matter, as a CloudFoundry router will front the CloudController and serve it at `api.#{hostname}:80`. Default is `9022`.\n* `cloudfoundry_cloud_controller['server']['use_nginx']` - TODO (trotter): Find out what this means. Default is `false`.\n* `cloudfoundry_cloud_controller['server']['insecure_instance_port']` - TODO (trotter): Find out what this means. Default is `9025`.\n* `cloudfoundry_cloud_controller['server']['log_level']` - Log level for the CloudFoundry application. Default is `info'`.\n* `cloudfoundry_cloud_controller['server']['log_file']` - TODO (trotter): Find out how this differes from `rails_log_file`. Default is `#{node['cloudfoundry_common']['log_dir']}/cloud_controller.log\"`.\n* `cloudfoundry_cloud_controller['server']['rails_log_file']` - TODO (trotter): Find out how this differs from `log_file`. Default is `#{node['cloudfoundry_common']['log_dir']}/cloud_controller-rails.log\"`.\n* `cloudfoundry_cloud_controller['server']['allow_debug']` - TODO (trotter): Find out what this means. Default is `true`.\n* `cloudfoundry_cloud_controller['server']['max_current_stagers']` - TODO (trotter): Find out what this means. Default is `10`.\n* `cloudfoundry_cloud_controller['server']['max_staging_runtime']` - TODO (trotter): Find out what this means. Default is `120`.\n* `cloudfoundry_cloud_controller['server']['staging_secure']` - TODO (trotter): Find out what this means. Default is `false`.\n* `cloudfoundry_cloud_controller['server']['admins']` - An array containing the email addresses of all server admins. Default is `['you@example.com']`.\n* `cloudfoundry_cloud_controller['database']['name']` - The name of the database that CloudController will use. Default is `cloud_controller'`.\n* `cloudfoundry_cloud_controller['database']['host']` - Hostname where CloudController's database is located. Default is `localhost'`.\n* `cloudfoundry_cloud_controller['server']['runtimes']` - An array of hashes containing the `name` and `version` for each runtime available in your CloudFoundry instance. XXX (trotter): Not sure we can store hashes in an attribute. Will have to test this part thoroughly. Default is `[`.\n* `cloudfoundry_cloud_controller['server']['frameworks']` - An array containing the name of each framework supported by your CloudFoundry instance. Due to a quirk in cloud_controller, you _must_ have rails3 and sinatra listed as frameworks. Default is `[`.\n* `cloudfoundry_cloud_controller['server']['pid_file']` - Where to store the pid_file for the CloudController. Default is `File.join(node['cloudfoundry_common']['pid_dir'], \"cloud_controller.pid\")`.\n\n\nUsage\n=====\n\nThis cookbook contains two components, `cloud_controller::server` and\n`cloud_controller::database`. The default recipe runs both recipes.\n\n`cloud_controller::database` is responsible for installing postgres and\nsetting up a database with the proper permissions. To use it on a\ndatabase node:\n\n    include_recipe \"cloud_controller::database\"\n\n`cloud_controller::server` will install a CloudController on the target\nnode along with the necessary configuration files and init scripts to\nrun it. To use it within your recipes:\n\n    include_recipe \"cloud_controller::server\"\n\nLicense and Author\n==================\n\nAuthor:: Trotter Cashion (<cashion@gmail.com>)\n\nCopyright:: 2012 Trotter Cashion\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "maintainer": "Trotter Cashion",
  "maintainer_email": "cashion@gmail.com",
  "license": "Apache 2.0",
  "platforms": {
    "ubuntu": ">= 0.0.0"
  },
  "dependencies": {
    "postgresql": ">= 0.0.0",
    "mysql": ">= 0.0.0",
    "database": ">= 0.0.0",
    "redisio": ">= 0.0.0",
    "cloudfoundry-common": ">= 0.0.0",
    "openssl": ">= 0.0.0"
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
  },
  "groupings": {
  },
  "recipes": {
  },
  "version": "0.0.1"
}